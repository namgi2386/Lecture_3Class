# 2차원 배열을 xy 좌표계처럼 사용한다.
# 상하좌우 탐색
# 현재 위치를 i,j 라고 할때 ==> arr2[i][j]
# 상하좌우로 움직였을때 i와 j가 어떻게 변하는가를 델타 배열로 기록
# di = [] , dj = []

# 위로(상) 한칸 이동 한다면?? i와 j는
# 위로 이동하면 행번호만 1 감소, 열번호는 변화없음 => arr2[i-1][j]

# 아래로(하) 한칸 이동 한다면??
# 행번호가 1 증가, 열번호는 변화 없음 => arr2[i+1][j]

# 왼쪽으로(좌) 한칸 이동 한다면??
# 행번호는 변화 없음, 열번호만 1 감소 => arr2[i][j-1]

# 오른쪽으로(우) 한칸 이동 한다면??
# 행번호는 변화 없음, 열번호만 1 증가 => arr2[i][j+1]

# 각 방향으로 이동했을때 좌표의 변화량을 배열로 기록 => 델타 배열
# 상하좌우 순서는 여러분들 마음대로
#     상 하 좌 우
#     0  1  2  3
di = [-1, 1, 0, 0]
dj = [0, 0, -1, 1]

# di[0] => 위(상)로 갔을때 i(행번호)의 변화 == -1
# dj[0] => 위(상)로 갔을때 j(열번호)의 변화 == 0
i,j = 1,1
for d in range(4):
    ni = i + di[d]
    nj = j + dj[d]

# 오른쪽위 대각선으로 한칸 이동한다면??
# 위 => 행번호가 1감소, 오른쪽 => 열번호가 1 증가 => arr2[i-1][j+1]

# 행번호, 열번호 변경후 반드시 확인해 할것
# 유효한 번호인가 검사
# 3 * 3 크기의 2차원 배열의 유효한 인덱스 범위? 0 <= i, j < 3
# 이 범위를 벗어나면 인덱스에러가 발생한다.
가로 = 3
세로 = 3

# 유효한 인덱스 인가요? 검사하는 함수
def is_valid(i,j):
    return 0 <= i < 세로 and 0 <= j < 가로